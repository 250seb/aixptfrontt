import React, { useState, useEffect, useRef } from "react"
import { motion, AnimatePresence, useInView } from "framer-motion"
import { 
  Phone, 
  MessageCircle, 
  Mail, 
  FileText, 
  Calendar, 
  Database, 
  BookOpen, 
  Gift, 
  BarChart3, 
  FileSpreadsheet, 
  Search,
  Presentation,
  Zap,
  ArrowRight,
  Bot,
  Users,
  Building2,
  Scale
} from "lucide-react"

interface WorkflowStep {
  icon: React.ReactNode
  label: string
  description: string
}

interface Workflow {
  id: string
  title: string
  industry: string
  description: string
  inputIcon: React.ReactNode
  inputLabel: string
  aiIcon: React.ReactNode
  aiLabel: string
  outputs: WorkflowStep[]
  keywords: string[]
  color: string
  accentColor: string
}

const workflows: Workflow[] = [
  {
    id: "car-dealership",
    title: "AI Voice Agent",
    industry: "Car Dealerships",
    description: "Transform customer calls into instant appointments and CRM updates",
    inputIcon: <Phone className="w-6 h-6" />,
    inputLabel: "Customer Call",
    aiIcon: <Bot className="w-8 h-8" />,
    aiLabel: "AI Voice Agent",
    outputs: [
      {
        icon: <Calendar className="w-5 h-5" />,
        label: "Appointment Scheduled",
        description: "Instant booking"
      },
      {
        icon: <Database className="w-5 h-5" />,
        label: "CRM Updated",
        description: "Customer data logged"
      }
    ],
    keywords: ["Appels 24/7", "Rendez-vous instantanés", "CRM mis à jour"],
    color: "from-blue-500 to-cyan-500",
    accentColor: "bg-blue-500"
  },
  {
    id: "law-firms",
    title: "AI Chatbot",
    industry: "Law Firms",
    description: "Automate client intake and case pre-assessment",
    inputIcon: <MessageCircle className="w-6 h-6" />,
    inputLabel: "Client Chat",
    aiIcon: <Bot className="w-8 h-8" />,
    aiLabel: "AI Chatbot",
    outputs: [
      {
        icon: <FileText className="w-5 h-5" />,
        label: "Intake Forms",
        description: "Auto-collected"
      },
      {
        icon: <BookOpen className="w-5 h-5" />,
        label: "Case Assessment",
        description: "Pre-qualified"
      }
    ],
    keywords: ["Qualification rapide", "Collecte de documents", "Suivi automatisé"],
    color: "from-purple-500 to-indigo-500",
    accentColor: "bg-purple-500"
  },
  {
    id: "hotels",
    title: "AI Email Personalization",
    industry: "Hotels",
    description: "Personalized guest communications and upselling",
    inputIcon: <Mail className="w-6 h-6" />,
    inputLabel: "Guest Email",
    aiIcon: <Bot className="w-8 h-8" />,
    aiLabel: "AI Email Agent",
    outputs: [
      {
        icon: <Calendar className="w-5 h-5" />,
        label: "Booking Confirmed",
        description: "Automated"
      },
      {
        icon: <Gift className="w-5 h-5" />,
        label: "Personalized Offers",
        description: "Upsells generated"
      }
    ],
    keywords: ["Emails personnalisés", "Réservations automatiques", "Ventes additionnelles"],
    color: "from-emerald-500 to-teal-500",
    accentColor: "bg-emerald-500"
  },
  {
    id: "accountants",
    title: "AI Data Analysis & Reports",
    industry: "Accountants",
    description: "Automated financial analysis and report generation",
    inputIcon: <FileSpreadsheet className="w-6 h-6" />,
    inputLabel: "Financial Data",
    aiIcon: <Bot className="w-8 h-8" />,
    aiLabel: "AI Analysis Engine",
    outputs: [
      {
        icon: <BarChart3 className="w-5 h-5" />,
        label: "Automated Reports",
        description: "Instant generation"
      },
      {
        icon: <Presentation className="w-5 h-5" />,
        label: "Slides Created",
        description: "Ready presentations"
      },
      {
        icon: <Search className="w-5 h-5" />,
        label: "Research Done",
        description: "Online intelligence"
      }
    ],
    keywords: ["Analyses automatiques", "Rapports instantanés", "Recherche intelligente"],
    color: "from-orange-500 to-red-500",
    accentColor: "bg-orange-500"
  }
]

const FlowLine = ({ isActive, delay = 0 }: { isActive: boolean; delay?: number }) => (
  <div className="relative flex-1 h-0.5 bg-gradient-to-r from-[#007AFF]/20 to-[#00D9F5]/20 mx-4">
    <AnimatePresence>
      {isActive && (
        <>
          <motion.div
            className="absolute inset-0 bg-gradient-to-r from-[#007AFF] to-[#00D9F5]"
            initial={{ scaleX: 0 }}
            animate={{ scaleX: 1 }}
            exit={{ scaleX: 0 }}
            transition={{ duration: 1, delay }}
            style={{ transformOrigin: "left" }}
          />
          <motion.div
            className="absolute top-1/2 w-2 h-2 bg-[#00F5A0] rounded-full shadow-lg"
            initial={{ x: 0, opacity: 0 }}
            animate={{ 
              x: "calc(100% - 8px)", 
              opacity: [0, 1, 1, 0] 
            }}
            transition={{ 
              duration: 2, 
              delay: delay + 0.5,
              repeat: Infinity,
              repeatDelay: 1
            }}
            style={{ transform: "translateY(-50%)" }}
          />
        </>
      )}
    </AnimatePresence>
  </div>
)

const WorkflowCard = ({ workflow, isActive }: { workflow: Workflow; isActive: boolean }) => {
  const cardRef = useRef<HTMLDivElement>(null)
  const isInView = useInView(cardRef, { once: false, amount: 0.3 })

  return (
    <motion.div
      ref={cardRef}
      className="relative bg-[#0A192F]/80 backdrop-blur-sm border border-[#007AFF]/20 rounded-2xl p-8 overflow-hidden"
      initial={{ opacity: 0, y: 50 }}
      animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}
      transition={{ duration: 0.8 }}
    >
      {/* Background gradient */}
      <div className={`absolute inset-0 bg-gradient-to-br ${workflow.color} opacity-5`} />
      
      {/* Industry badge */}
      <div className="flex items-center gap-2 mb-6">
        <div className={`w-3 h-3 rounded-full ${workflow.accentColor}`} />
        <span className="text-[#00F5A0] text-sm font-medium">{workflow.industry}</span>
      </div>

      {/* Title */}
      <h3 className="text-2xl font-bold text-white mb-2">{workflow.title}</h3>
      <p className="text-gray-300 mb-8">{workflow.description}</p>

      {/* Workflow visualization */}
      <div className="flex items-center mb-8">
        {/* Input */}
        <motion.div 
          className="flex flex-col items-center"
          initial={{ scale: 0.8, opacity: 0 }}
          animate={isActive ? { scale: 1, opacity: 1 } : { scale: 0.8, opacity: 0.6 }}
          transition={{ duration: 0.5 }}
        >
          <div className="w-16 h-16 bg-gradient-to-br from-gray-600 to-gray-700 rounded-xl flex items-center justify-center mb-2 relative">
            {workflow.inputIcon}
            <motion.div
              className="absolute inset-0 bg-[#007AFF]/20 rounded-xl"
              animate={isActive ? { opacity: [0, 0.5, 0] } : { opacity: 0 }}
              transition={{ duration: 2, repeat: Infinity }}
            />
          </div>
          <span className="text-xs text-gray-400 text-center">{workflow.inputLabel}</span>
        </motion.div>

        {/* Flow line to AI */}
        <FlowLine isActive={isActive} delay={0} />

        {/* AI Agent */}
        <motion.div 
          className="flex flex-col items-center relative"
          initial={{ scale: 0.8, opacity: 0 }}
          animate={isActive ? { scale: 1, opacity: 1 } : { scale: 0.8, opacity: 0.6 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <div className={`w-20 h-20 bg-gradient-to-br ${workflow.color} rounded-xl flex items-center justify-center mb-2 relative`}>
            {workflow.aiIcon}
            <motion.div
              className="absolute inset-0 bg-white/10 rounded-xl"
              animate={isActive ? { 
                scale: [1, 1.1, 1],
                opacity: [0.3, 0.6, 0.3]
              } : { scale: 1, opacity: 0 }}
              transition={{ duration: 2, repeat: Infinity }}
            />
            {/* Pulsing ring */}
            <motion.div
              className="absolute inset-0 border-2 border-[#00F5A0] rounded-xl"
              animate={isActive ? { 
                scale: [1, 1.2, 1],
                opacity: [0.8, 0, 0.8]
              } : { scale: 1, opacity: 0 }}
              transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}
            />
          </div>
          <span className="text-xs text-gray-300 text-center font-medium">{workflow.aiLabel}</span>
        </motion.div>

        {/* Flow line to outputs */}
        <FlowLine isActive={isActive} delay={0.5} />

        {/* Outputs */}
        <div className="flex flex-col gap-4">
          {workflow.outputs.map((output, index) => (
            <motion.div
              key={index}
              className="flex items-center gap-3"
              initial={{ x: 20, opacity: 0 }}
              animate={isActive ? { x: 0, opacity: 1 } : { x: 20, opacity: 0.6 }}
              transition={{ duration: 0.5, delay: 0.8 + index * 0.2 }}
            >
              <div className="w-12 h-12 bg-gradient-to-br from-[#00F5A0]/20 to-[#00D9F5]/20 rounded-lg flex items-center justify-center relative">
                {output.icon}
                <motion.div
                  className="absolute inset-0 bg-[#00F5A0]/20 rounded-lg"
                  animate={isActive ? { opacity: [0, 0.5, 0] } : { opacity: 0 }}
                  transition={{ duration: 2, repeat: Infinity, delay: 1 + index * 0.3 }}
                />
              </div>
              <div>
                <div className="text-sm font-medium text-white">{output.label}</div>
                <div className="text-xs text-gray-400">{output.description}</div>
              </div>
            </motion.div>
          ))}
        </div>
      </div>

      {/* Animated keywords */}
      <div className="flex flex-wrap gap-2">
        {workflow.keywords.map((keyword, index) => (
          <motion.span
            key={index}
            className="px-3 py-1 bg-[#007AFF]/10 border border-[#007AFF]/20 rounded-full text-xs text-[#00D9F5]"
            initial={{ opacity: 0, scale: 0.8 }}
            animate={isActive ? { opacity: 1, scale: 1 } : { opacity: 0.6, scale: 0.8 }}
            transition={{ duration: 0.3, delay: 1.2 + index * 0.1 }}
          >
            {keyword}
          </motion.span>
        ))}
      </div>

      {/* Floating particles */}
      {isActive && (
        <>
          <motion.div
            className="absolute top-1/4 right-1/4 w-1 h-1 bg-[#00F5A0] rounded-full"
            animate={{
              y: [-10, -20, -10],
              opacity: [0.3, 1, 0.3],
            }}
            transition={{ duration: 3, repeat: Infinity }}
          />
          <motion.div
            className="absolute bottom-1/3 left-1/4 w-1.5 h-1.5 bg-[#00D9F5] rounded-full"
            animate={{
              y: [10, 0, 10],
              opacity: [0.3, 1, 0.3],
            }}
            transition={{ duration: 4, repeat: Infinity, delay: 1 }}
          />
        </>
      )}
    </motion.div>
  )
}

const UseCasesSection = () => {
  const [activeWorkflow, setActiveWorkflow] = useState(0)
  const sectionRef = useRef<HTMLDivElement>(null)
  const isInView = useInView(sectionRef, { once: false, amount: 0.1 })

  useEffect(() => {
    if (!isInView) return

    const interval = setInterval(() => {
      setActiveWorkflow((prev) => (prev + 1) % workflows.length)
    }, 4000)

    return () => clearInterval(interval)
  }, [isInView])

  return (
    <section 
      ref={sectionRef}
      className="w-full py-24 px-4 bg-[#0A192F] relative overflow-hidden"
    >
      {/* Background elements */}
      <div className="absolute inset-0">
        <div className="absolute top-1/4 left-1/4 w-64 h-64 bg-[#007AFF]/5 rounded-full blur-3xl" />
        <div className="absolute bottom-1/4 right-1/4 w-80 h-80 bg-[#00F5A0]/5 rounded-full blur-3xl" />
      </div>

      <div className="container mx-auto max-w-7xl relative z-10">
        {/* Header */}
        <motion.div 
          className="text-center mb-16"
          initial={{ opacity: 0, y: 30 }}
          animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 30 }}
          transition={{ duration: 0.8 }}
        >
          <div className="flex items-center justify-center gap-2 mb-4">
            <Zap className="w-5 h-5 text-[#007AFF]" />
            <span className="text-[#007AFF] font-medium">AI AUTOMATION WORKFLOWS</span>
          </div>
          
          <h2 className="text-4xl md:text-5xl lg:text-6xl font-bold mb-6">
            <span className="text-white">Transform Your </span>
            <span className="bg-gradient-to-r from-[#00F5A0] to-[#00D9F5] bg-clip-text text-transparent">
              Industry Operations
            </span>
          </h2>
          
          <p className="text-xl text-gray-300 max-w-3xl mx-auto">
            See how AI agents revolutionize workflows across different industries with intelligent automation
          </p>
        </motion.div>

        {/* Workflows */}
        <div className="space-y-8">
          {workflows.map((workflow, index) => (
            <WorkflowCard
              key={workflow.id}
              workflow={workflow}
              isActive={activeWorkflow === index}
            />
          ))}
        </div>

        {/* Industry icons */}
        <motion.div 
          className="flex justify-center items-center gap-8 mt-16 pt-16 border-t border-[#007AFF]/20"
          initial={{ opacity: 0 }}
          animate={isInView ? { opacity: 1 } : { opacity: 0 }}
          transition={{ duration: 0.8, delay: 0.5 }}
        >
          <div className="flex items-center gap-2 text-gray-400">
            <Building2 className="w-5 h-5" />
            <span className="text-sm">Car Dealerships</span>
          </div>
          <div className="flex items-center gap-2 text-gray-400">
            <Scale className="w-5 h-5" />
            <span className="text-sm">Law Firms</span>
          </div>
          <div className="flex items-center gap-2 text-gray-400">
            <Building2 className="w-5 h-5" />
            <span className="text-sm">Hotels</span>
          </div>
          <div className="flex items-center gap-2 text-gray-400">
            <Users className="w-5 h-5" />
            <span className="text-sm">Accountants</span>
          </div>
        </motion.div>

        {/* CTA */}
        <motion.div 
          className="text-center mt-16"
          initial={{ opacity: 0, y: 30 }}
          animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 30 }}
          transition={{ duration: 0.8, delay: 0.7 }}
        >
          <button className="group bg-gradient-to-r from-[#007AFF] to-[#00D9F5] text-white px-8 py-4 rounded-full font-medium text-lg shadow-lg hover:shadow-xl transition-all duration-300 flex items-center gap-2 mx-auto">
            Start Your AI Transformation
            <ArrowRight className="w-5 h-5 group-hover:translate-x-1 transition-transform" />
          </button>
        </motion.div>
      </div>
    </section>
  )
}

export default function UseCasesSectionDemo() {
  return <UseCasesSection />
}